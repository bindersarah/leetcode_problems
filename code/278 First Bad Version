class Solution:
    def firstBadVersion(self, n: int) -> int:
        # init pointers
        l, r = 1, n
        # init first bad as the largest possible n
        first_bad = n

        while l <= r:
            # define mid
            mid = (l + r) // 2
            # if get lucky, found bad version:
            if isBadVersion(mid): 
                # update earliest bad version found, continue searchig left
                first_bad = mid
                # remove right half, search left
                r = mid - 1
            elif isBadVersion(mid) == False:
                # remove left half, search right
                l = mid + 1
        return first_bad

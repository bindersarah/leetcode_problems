# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        # create dummy head node 
        LL = ListNode()  # initializes w head = 0
        cur = LL
        carry = 0

        # iterate over each node of list1 and list 2, while not null, or carry even if l1/l2 are empty
        while l1 or l2 or carry:
            value1 = l1.val if l1 else 0
            value2 = l2.val if l2 else 0
            
            # add each digit to compile
            total = value1 + value2 + carry
            # if digit > 10, we only want to take the value in ones place and carry the dig in tens place
            digit = total % 10
            carry = total // 10

            # insert into LL
            cur.next = ListNode(digit) # append the digit to LL # .next is like a link: arrow pointing to next digit
            
            # update pointers
            cur = cur.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        
        # exit while loop and return our LL
        return LL.next # .next points to the true head, rather than the leading 0 that LL was initialized with

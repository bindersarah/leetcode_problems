class Solution:
    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:
        # define helper function to check whether substring exists in string
        def helper(s, substring, removed):
            # init pointers
            i1, i2 = 0, 0 

            while i1 < len(s) and i2 < len(substring): # each pointer per string
                if i1 in removed or s[i1] != substring[i2]: # if one of removed /not in substrg: skip, move to next
                    i1 += 1
                    continue
                # found a matching chr, increment both pointers
                i1 +=1
                i2 +=1
            return i2 == len(substring) # if found entire substring in str = True
        
        # binary search over removed chrs
        result = 0
        l, r = 0, len(removable) - 1
        while l <= r:
            mid = (l+r) // 2
            removed = set(removable[:mid + 1]) # the set of removable, up to the mid chr +1 due to exclusive-indexing
            # based on this subset of removable list, compute whether substr exists via helper funct
            if helper(s, p, removed): # if True
                # update result (max number of removabl chrs)
                result = max(result, mid + 1) # current max removable chrs
                # look for more substrings and removable chrs in original str, by changing pointers/mid
                l = mid + 1 # search right
            else:
                r = mid - 1 
        return result

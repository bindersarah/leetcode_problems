# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
       # define for clarity
        curr = head
        
        # helper function for recursion
        def reverseLL(curr, prev):
            if curr is None: # base case when head node = Null (we are at the end)
                return prev
            nxt = curr.next # define temp variable # references next NODE
            curr.next = prev # move pointer to previous node
            return reverseLL(nxt, curr) # next becomes current, and current becomes prev
        
        return reverseLL(curr, None) # at end of LL the head's prev = Null

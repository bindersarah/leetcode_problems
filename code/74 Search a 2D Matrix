class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        mrows = len(matrix) # 3
        ncols = len(matrix[0]) # 4

        # first binary search = to find which row target is in 
        top, bottom = 0, mrows - 1

        while top <= bottom:
            row = (top + bottom) // 2
            # search last integer in row
            if matrix[row][-1] < target:
                top = row + 1 
            elif matrix[row][0] > target:
                bottom = row - 1 
            else:
                break
    
        # then target not in matrix
        if not (top <= bottom):
            return False

        # row containing target
        row = (top + bottom) // 2

        # second binary search, search within the discovered row
        l, r = 0, ncols - 1

        while l <= r:
            mid = (l + r) // 2
            if matrix[row][mid] == target:
                # got lucky, return True
                return True
            elif matrix[row][mid] > target:
                # remove right half, search left
                r = mid - 1
            elif matrix[row][mid] < target:
                l = mid + 1
        return False
